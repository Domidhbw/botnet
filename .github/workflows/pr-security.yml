name: pr-security
on:
  pull_request:
    branches: [ main ]
permissions:
  contents: read
  security-events: write   # for SARIF upload
  actions: read
  checks: write

jobs:
  pr-security:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ----- .NET SDK BEFORE any dotnet commands -----
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # ----- Locate backend solution/project (once) -----
      - name: Locate .sln or .csproj
        id: dotnet_path
        shell: bash
        run: |
          set -e
          SOLN=$(git ls-files '**/*.sln' | head -n1 || true)
          if [ -z "$SOLN" ]; then
            PROJ=$(git ls-files '**/*.csproj' | head -n1 || true)
            if [ -z "$PROJ" ]; then
              echo "No .sln or .csproj found"; exit 1
            fi
            echo "path=$PROJ" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$PROJ")" >> $GITHUB_OUTPUT
            echo "Using .csproj: $PROJ"
          else
            echo "path=$SOLN" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$SOLN")" >> $GITHUB_OUTPUT
            echo "Using .sln: $SOLN"
          fi

      # ----- Restore & Build backend (single, consistent path) -----
      - name: Restore (.NET)
        run: dotnet restore "${{ steps.dotnet_path.outputs.path }}"

      - name: Build (.NET)
        # keep simple build; if you want strictness, add /warnaserror once code is clean
        run: dotnet build "${{ steps.dotnet_path.outputs.path }}" --configuration Release

      # ----- Frontend (Angular) detection + build (optional but robust) -----
      - name: Locate Angular workspace
        id: ng_path
        shell: bash
        run: |
          set -e
          if [ -d "ClientApp" ] && [ -f "ClientApp/package.json" ]; then
            echo "dir=ClientApp" >> $GITHUB_OUTPUT
            exit 0
          fi
          # find first package.json that looks like Angular
          CANDIDATE=$(git ls-files '**/package.json' | while read f; do
            if grep -q '"@angular/core"' "$f"; then dirname "$f"; break; fi
          done)
          if [ -z "$CANDIDATE" ]; then
            echo "No Angular project found; skipping npm steps."
            echo "dir=" >> $GITHUB_OUTPUT
          else
            echo "dir=$CANDIDATE" >> $GITHUB_OUTPUT
            echo "Angular dir: $CANDIDATE"
          fi

      - name: Use Node
        if: ${{ steps.ng_path.outputs.dir != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: ${{ steps.ng_path.outputs.dir }}/package-lock.json

      - name: Install (Angular)
        if: ${{ steps.ng_path.outputs.dir != '' }}
        working-directory: ${{ steps.ng_path.outputs.dir }}
        run: npm ci

      - name: Lint/Build (Angular)
        if: ${{ steps.ng_path.outputs.dir != '' }}
        working-directory: ${{ steps.ng_path.outputs.dir }}
        run: |
          npm run lint --if-present
          npm run build --if-present

      # ----- SAST: Semgrep (C# + TS/Angular) -----
      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: .semgrep.yml   # keep at repo root or adjust
          generateSarif: true
          auditOn: pull_request

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # ----- SCA: OWASP Dependency-Check (.NET) -----
      - name: Dependency-Check (.NET)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'dotnet-backend'
          path: ${{ steps.dotnet_path.outputs.dir }}
          format: 'HTML,JSON'
          failOnCVSS: '7.0'

      - name: Upload DepCheck .NET report
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-dotnet
          path: ${{ github.workspace }}/reports

      # ----- SCA: OWASP Dependency-Check (npm) -----
      - name: Dependency-Check (npm)
        if: ${{ steps.ng_path.outputs.dir != '' }}
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'angular-frontend'
          path: ${{ steps.ng_path.outputs.dir }}
          format: 'HTML,JSON'
          failOnCVSS: '7.0'

      - name: Upload DepCheck npm report
        if: ${{ steps.ng_path.outputs.dir != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-npm
          path: ${{ github.workspace }}/reports

      # ----- Secrets: Gitleaks -----
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: community
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --redact --no-banner --report-format sarif --report-path gitleaks.sarif

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      # ----- IaC / Misconfig: Checkov -----
      - name: Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,kubernetes,compose
          soft_fail: false
